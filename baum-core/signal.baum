add = prim "add"
print = prim "print"
concat = prim "concat"
readline = prim "readline"
void = prim "void"
fork' = prim "fork"
fork = |e k| fork' e (k 0)
sleep' = prim "sleep"
sleep = |n k| sleep' n (k 0)
eq = prim "eq"
is0 = |x| eq 0
decr = prim "decr"
store = prim "store"
read = prim "read"
write = prim "write"
putln = |s k| print (concat s "\n") k
println = |s k| print s |_| print "\n" k
fix = |f| (|x| f (|y| (x x) y)) (|x| f (|y| (x x) y))

nil = |c n|  n
cons = |x l| |c n| c x (l c n)

pair = |x y| |k| k x y
fst = |p| p (|x y| x)
snd = |p| p (|x y| y)

left = |x| |l r| l x
right = |y| |l r| r y

-- ([(str, value?)], [(str, value??)])

register = |name writer box k|
  putln (concat "Register: " name) |_|
  read box |state|
  write box (pair (cons (pair name writer) (fst state)) (snd state)) k

observe = |name reader box k|
  putln (concat "Observe: " name) |_|
  read box |state|
  write box (pair (fst state) (cons (pair name reader) (snd state))) k

printAll = |box k|
  read box |state|
  let
    printOne = |p s| |k|
      s |_|
      print (concat (concat "- " (fst p)) ": ") |_|
      (snd p) |x|
      println x k
  in ((snd state) printOne (|k| k 0)) k

emitEvery = |n box k|
  read box |state|
  let
    emitOne' = |p k|
      println (concat "Emit: " (fst p)) |_|
      fork ((snd p) 0) k
    emitOne = |p s| |k|
      s |_|
      eq (fst p) n (emitOne' p k) (k 0)
  in eq n "exit" void (((fst state) emitOne (|k| k 0)) k)

loop = fix |self| |box|
  printAll box |_|
  readline "> " |s|
  emitEvery s box |_|
  self box

countUp = fix |self| |t| 
  read t |x|
  write t (add x 1) |_|
  sleep 1000 |_|
  self t

main = store (pair nil nil) |box|
  observe "x" (|k| k 3) box |_|
  store 0 |t|
  fork (countUp t) |_|
  observe "t" (|k| read t |x| k x) box |_|
  register "r" (|_| write t 0 |_| void) box |_|
  store 0 |u|
  observe "c" (|k| read u |x| k x) box |_|
  register "i" (|_| read u |x| write u (add x 1) |_| void) box |_|
  register "a" (|_| read t |x| read u |y| write u (add x y) |_| void) box |_|
  loop box