syntax 1> A → B = Π(x: A) B
syntax 1> (x: A) → B = Π(x: A) B
syntax 1> (x y: A) → B = Π(x y: A) B
syntax 1> {x: A} → B = Π{x: A} B
syntax 0> | x | y = λ(x) y

u32 = prim "rt/u32"
add: u32 → u32 → u32 = prim "rt/u32/add"
zero: u32 = prim "rt/u32/0"
one: u32 = prim "rt/u32/1"

! = prim "rt/!"
print = prim "rt/print"
exit = prim "rt/exit"

nat = (a: U) → (a → a) → a → a

printNat (n: nat) (k: Σ() → !) = print (n _ (add one) zero) k

n0: nat = λ(a: U) λ(f: a → a) λ(x: a) x
n1: nat = λ(a: U) λ(f: a → a) λ(x: a) f x
n2: nat = λ(a: U) λ(f: a → a) λ(x: a) f (f x)
n3: nat = λ(a: U) λ(f: a → a) λ(x: a) f (f (f x))

succ: nat → nat = λ(n: nat) λ(a: U) λ(f: a → a) λ(x: a) f (n a f x)
add: nat → nat → nat = λ(m: nat) λ(n: nat) λ(a: U) λ(f: a → a) λ(x: a) m a f (n a f x)
mul: nat → nat → nat = λ(m: nat) λ(n: nat) λ(a: U) λ(f: a → a) λ(x: a) m a (n a f) x
pow: nat → nat → nat = λ(m: nat) λ(n: nat) λ(a: U) λ(f: a → a) λ(x: a) n _ (m _) f x

syntax a + b = add a b
syntax a × b = mul a b
syntax a ^ b = pow a b

main: ! =
  let
    n9 = n3 × n3
    tri (n: nat) (k: Σ() → !): ! = let
        u = n Σ(nat, Σ() → !) (λ(p) (succ p.0, λ(_) printNat p.0 p.1)) (n0, k)
      in u.1 ()
  in tri n9 |_| exit

-- module X (Id: {a: U} → (x y: a) → U) (refl: {a: U} → (x: a) → Id {a} x x) = {
--   syntax 1 a ~ b = Id a b
--   u: add one one ~ two = refl _
-- }
